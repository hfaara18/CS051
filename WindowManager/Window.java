import objectdraw.*;import java.awt.*;/** * Creates a resizable, minimizable window *  * @author Hussein Faara, CS051J * */public class Window {	// dimensions of window and close button	private static final double TITLE_HEIGHT = 14; // height of title bar	private static final double RESIZE_SIZE = 10; // size of resize box side	private static final double CLOSE_SIZE = 7;		// the heading's offset	private static final double HEADING_OFFSET = 31;			// the window and its components	private FramedRect resizeBox, window, title;	private FilledOval close, zoom, minimize;		// the header	private Text header;		// initial dimensions and positions of the window	private double initialWidth, initialHeight;	private Location initialPosition;		// the locations of the window and other components	private Location windowStart, titleStart, textLocation, closeLocation, zoomLocation,						minimizeLocation, resizeLocation;		// the locations of zoomed window and other components	private Location zoomedWindowLocation, newCloseLocation, newZoomLocation, 						newMinimizeLocation, newTextLocation, newResizeLocation;		// the locations of minimized window components	private Location minimizedTitleLocation, minimizedCloseLocation, 				minimizedZoomLocation, minimizedMinimizeLocation, minimizedTextLocation;		// the location of window and its components before minimize or zoom	private Location initialTitleLocation, initialCloseLocation, initialResizeLocation, 					initialZoomLocation, initialMinimizeLocation, initialTextLocation;		// the canvas	private DrawingCanvas canvas;		// whether window is zoomed or minimized	private Boolean zoomed, minimized;			/**	 * 	 * 	 * @param windowLocn	 * 			location of the window	 * @param width	 * 			width of the window	 * @param height	 * 			height of the window	 * @param canvas	 * 			Drawing canvas	 */	public Window(Location windowLocn, double width, double height,			  DrawingCanvas canvas) {		// "remembers" canvas		this.canvas = canvas;				// the location of the window components		windowStart = windowLocn;		titleStart = new Location(windowStart.getX(),				windowStart.getY() - TITLE_HEIGHT);		resizeLocation = new Location(windowStart.getX() + width 				- RESIZE_SIZE, windowStart.getY() + height 				- RESIZE_SIZE);		closeLocation = new Location(titleStart.getX() + 2, 				titleStart.getY() + 3);		zoomLocation = new Location(closeLocation.getX() + 1.5 				* CLOSE_SIZE, closeLocation.getY());				minimizeLocation =				new Location(zoomLocation.getX() + 1.5 * CLOSE_SIZE,						zoomLocation.getY() );				// the window and its components		window = new FramedRect(windowStart, width, height, canvas);		title = new FramedRect(titleStart, width, TITLE_HEIGHT, canvas);		resizeBox = new FramedRect(resizeLocation, RESIZE_SIZE,				RESIZE_SIZE, canvas);				// the interactive close button		close = new FilledOval(closeLocation, CLOSE_SIZE, CLOSE_SIZE,				canvas);		close.setColor(Color.RED);				// the interactive zoom button				zoom = new FilledOval(zoomLocation, CLOSE_SIZE, CLOSE_SIZE,				canvas);		zoom.setColor(Color.GREEN);				//the interactive minimize button		minimize = new FilledOval(minimizeLocation, CLOSE_SIZE, CLOSE_SIZE,				canvas);		minimize.setColor(Color.YELLOW);				// the title and its location		textLocation = new Location(titleStart.getX() + HEADING_OFFSET,				titleStart.getY());		header = new Text("Faara's Window",textLocation, canvas );				// initializes zoomed and minimized to false		zoomed = false;		minimized = false;		}		/**	 * A method that resizes the window and moves	 * other window components accordingly	 * @param x	 * 			the x Offset	 * @param y	 * 			the y Offset	 */	public void resizeBy(double x, double y) {		// changes width and height of window		window.setWidth(window.getWidth() + x);		window.setHeight(window.getHeight() + y);				// changes the width of the title bar		title.setWidth(x + title.getWidth());				// moves the resize box and heading relative		// to window size		resizeBox.move(x, y);		header.move(x / 2, 0);	}		/**	 * A method that moves the window and its components 	 * @param x	 * 			the x Offset	 * @param y	 * 			the y Offset	 */	public void move(double x, double y) {		// moves the window and resize box		window.move(x, y);		resizeBox.move(x, y);				// moves the title bar and all of		// its components		title.move(x, y);		close.move(x, y);		zoom.move(x, y);		minimize.move(x, y);		header.move(x, y);	}		/**	 * A method that determines if user wants to resize	 * @param point	 * 			Location of mouse click	 * @return	 * 		returns true if user wants to resize	 */	public boolean inResizeBox(Location point) {		return resizeBox.contains(point);	}	/**	 * A method that determines if user is holding title bar	 * @param point	 * 		Location of Mouse click	 * @return	 * 		Returns true if the user wants to drag window	 */	public boolean inTitleBar(Location point) {		return title.contains(point);	}		/**	 * A method that determines if user clicks whether 	 * user has clicked in close circle	 * 	 * @param point	 * 			Location of the Mouse click	 * @return	 * 		returns true if the user wants to close window	 */	public boolean inGoAwayCircle(Location point) {		return close.contains(point);	}	/**	 * A method that removes everything from the canvas	 */	public void removeFromCanvas() {		window.removeFromCanvas();		title.removeFromCanvas();		resizeBox.removeFromCanvas();		close.removeFromCanvas();		header.removeFromCanvas();		zoom.removeFromCanvas();		minimize.removeFromCanvas();			}		/**	 * A method that determines if user clicks whether 	 * user has clicked in zoom circle	 * 	 * @param point	 * 			Location of the Mouse click	 * @return	 * 		returns true if the user wants to zoom window	 */	public boolean inZoomCircle(Location point) {		return zoom.contains(point);	}			/**	 * A method that maximizes/ zooms window	 * 	 */	public void zoom() {			// retrieves initial window location and dimensions			initialPosition = window.getLocation();			initialWidth = window.getWidth();			initialHeight = window.getHeight(); 						// the locations of the zoomed window and its components			zoomedWindowLocation = new Location(0, TITLE_HEIGHT );			newCloseLocation = new Location( 2,  3);			newZoomLocation =new Location(newCloseLocation.getX()					+ 1.5 * CLOSE_SIZE,	newCloseLocation.getY());			newMinimizeLocation = new Location(newZoomLocation.getX()					+ 1.5 * CLOSE_SIZE,	newZoomLocation.getY() );			newTextLocation = new Location(canvas.getWidth() / 2, 0);						// moves title, window and everything in them to 			// the upper left corner of the canvas			title.moveTo(0, 0);						close.moveTo(newCloseLocation);			zoom.moveTo(newZoomLocation);			minimize.moveTo(newMinimizeLocation);			window.moveTo(zoomedWindowLocation);			header.moveTo(newTextLocation);						// maximizes title width and window dimensions			title.setWidth(canvas.getWidth());			window.setWidth(canvas.getWidth());			window.setHeight(canvas.getHeight() - 1.5 * RESIZE_SIZE);						// moves resize box accordingly			newResizeLocation = new Location(window.getX()					+ window.getWidth() - RESIZE_SIZE, window.getY()					+ window.getHeight() - RESIZE_SIZE);			resizeBox.moveTo(newResizeLocation);						// sets zoomed to true			zoomed = true;	}		/**	 * A method that determines whether user has clicked in 	 * minimize circle	 * 	 * @param point	 * 		coordinates of mouse press	 * @return	 * 		returns true if mouse click is within minimize circle	 */				public boolean inMinimizeCircle(Location point) {		return minimize.contains(point);	}		/**	 * A method that minimizes the window 	 * 	 */	public void minimize() {		// retrieves initial window location and dimensions		initialPosition = window.getLocation();		initialWidth = window.getWidth();		initialHeight = window.getHeight();				// the locations of minimized window components		minimizedTitleLocation = 				new Location(0, canvas.getHeight() - 2 * TITLE_HEIGHT);		minimizedCloseLocation = 				new Location(minimizedTitleLocation.getX() + 2,						minimizedTitleLocation.getY() +  3);		minimizedZoomLocation = 				new Location(minimizedCloseLocation.getX()						+ 1.5 * CLOSE_SIZE,	minimizedCloseLocation.getY());		minimizedMinimizeLocation = 				new Location(minimizedZoomLocation.getX()						+ 1.5 * CLOSE_SIZE, minimizedZoomLocation.getY() );		minimizedTextLocation = 				new Location(minimizedTitleLocation.getX()						+ HEADING_OFFSET, minimizedTitleLocation.getY());;								// moves title and its components to lower right corner of window		title.moveTo(minimizedTitleLocation);		close.moveTo(minimizedCloseLocation);		zoom.moveTo(minimizedZoomLocation);		minimize.moveTo(minimizedMinimizeLocation);		header.moveTo(minimizedTextLocation);				// hides remaining window components		window.hide();		resizeBox.hide();				// sets minimized to true		minimized = true;	}	/**	 * A method that sends window and its components to initial position	 * 	 */	public void sendToInitialPosition() {			// the locations of the original window and its components			initialTitleLocation = new Location(initialPosition.getX(),							initialPosition.getY() - TITLE_HEIGHT );			initialCloseLocation =					new Location( initialTitleLocation.getX() + 2,							initialTitleLocation.getY() + 3);			initialResizeLocation =					new Location( initialPosition.getX() + initialWidth 					- RESIZE_SIZE, initialPosition.getY() + initialHeight					- RESIZE_SIZE);			initialZoomLocation =					new Location(initialCloseLocation.getX() + 1.5 * CLOSE_SIZE,							initialCloseLocation.getY());			initialMinimizeLocation =					new Location(initialZoomLocation.getX() + 1.5 * CLOSE_SIZE,							initialZoomLocation.getY() );			initialTextLocation = 					new Location(initialTitleLocation.getX() + HEADING_OFFSET,							initialTitleLocation.getY());						// moves window and title components to their original position			title.moveTo(initialTitleLocation);						window.moveTo(initialPosition);						close.moveTo(initialCloseLocation);			zoom.moveTo(initialZoomLocation);			minimize.moveTo(initialMinimizeLocation);			resizeBox.moveTo(initialResizeLocation);			header.moveTo(initialTextLocation);						// sets title and window to their original dimensions			title.setWidth(initialWidth);			window.setWidth(initialWidth);			window.setHeight(initialHeight);						// sets zoomed to false			zoomed = false;				}			/**	 * A method that restores minimized window	 * 	 */	public void restoreWindow() {		// sends window and its components		// back to its initial position		sendToInitialPosition();		window.show();		resizeBox.show();				// sets minimized to false		minimized = false;					}		/**	 * A method that checks if the window is zoomed	 * 	 * @return	 * 		returns true if window is zoomed	 */	public boolean zooming() {		return zoomed;	}		/**	 * A method that checks if window is minimized	 * 	 * @return	 * 		returns true is window is minimized	 */	public boolean minimized() {		return minimized;	}}